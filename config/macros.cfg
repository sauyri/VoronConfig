#####################################################################
#   Macros
#####################################################################

[gcode_macro G32]
gcode:
    BED_MESH_CLEAR
    G28
    M106 S255           ;Turn on PF to keep probe cool
    M117 QGL
    QUAD_GANTRY_LEVEL
    G28 
    M107                ;Turn that fan off!


[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
gcode:
    # Parameters
    {% set BED_TEMP = params.BED_TEMP|default(110)|int %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(240)|float %}
    {% set BED_MESH = params.BED_MESH|default(1)|int %}
    {% set BEACON_TARGET = params.BEACON_TARGET|default(75) %}
    {% set FILAMENT_TYPE = params.FILAMENT_TYPE|default('') %}
    {% set SHEET = params.TEXTURED|default(0)|float %}

    SET_GCODE_OFFSET Z=0  ;Because I'm basic.

    G28
  
    #M106 S255           ;Part fan likes to party too
    #M104 S{135}
    #M140 S{BED_TEMP}

    {% if SHEET == 0 %}
      {% if FILAMENT_TYPE == 'PLA' %}
        BEACON_MODEL_SELECT NAME=SMOOTH_PLA
      {% elif FILAMENT_TYPE == 'PETG' %}
        BEACON_MODEL_SELECT NAME=SMOOTH_PETG
      {% elif FILAMENT_TYPE == 'ASA' %}
        BEACON_MODEL_SELECT NAME=SMOOTH_ASA
      {% endif %}
    {% elif SHEET == 1 %}
      {% if FILAMENT_TYPE == 'PLA' %}
        BEACON_MODEL_SELECT NAME=TEXTURED_PLA
      {% elif FILAMENT_TYPE == 'PETG' %}
        BEACON_MODEL_SELECT NAME=TEXTURED_PETG
      {% elif FILAMENT_TYPE == 'ASA' %}
        BEACON_MODEL_SELECT NAME=TEXTURED_ASA
      {% endif %}
    {% else %}
      BEACON_MODEL_SELECT NAME=default
    {% endif %}

    {% if FILAMENT_TYPE == 'ASA' %}
      M109 S155
      Beacon_Soak BEACON_TARGET={BEACON_TARGET} BED={BED_TEMP}
    {% endif %}

    M140 S{BED_TEMP}
    M190 S{BED_TEMP}

    QUAD_GANTRY_LEVEL
    G28 Z

    BED_MESH_CALIBRATE runs=2
    G28 Z

    M107
    G0 X5 Y5 Z0.2 F9000

    SET_FAN_SPEED FAN=exhaust_fan SPEED=0.5

    M109 S{EXTRUDER_TEMP}

    PRINT_PURGE
    M117 Starting Print


[gcode_macro Beacon_Soak]
gcode:
    {% set BEACON_TARGET = params.BEACON_TARGET|default(75) %}
    {% set BEACON_MAXIMUM = params.BEACON_TARGET|int + 7 %}
    {% set BED_TEMP = params.BED_TEMP|default(110) %}
    M106 S255
    G0 X175 Y175 Z0.5
    ;RESPOND MSG="Heating Bed"
    M190 S{BED_TEMP}
    {% if BEACON_TARGET|int > 0 %}
        ;RESPOND MSG="Cooking Bacon"
        TEMPERATURE_WAIT sensor="temperature_sensor beacon_coil" MINIMUM={BEACON_TARGET} ;MAXIMUM={BEACON_MAXIMUM}
        ;RESPOND MSG="Bacon is done"
    {% else %}
        ;RESPOND MSG="Skipping Bacon"
    {% endif %}


[gcode_macro Fake_position]
# danger. Will pass set location to klipper to allow forced moves
gcode:
    SET_KINEMATIC_POSITION X=175 Y=175 Z=50


[gcode_macro PRINT_PURGE]
gcode:
    M117 Purging...
    #G0 X5 Y5 Z20 F9000  
    G92 E0;    
    G90   
    G0 Z0.4
    G91
    G1 X120 E30 F1200;
    G1 Y1
    G1 X-120 E30 F1200;
    G92 E0;
    G1 F9000


[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    {% set FILAMENT_TYPE = params.FILAMENT_TYPE|default('') %}

    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-3.0 F3600                ; retract filament
    G91                            ; relative positioning
    G0 Z1.00 X20.0 Y20.0 F20000    ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    G1 Z20 F3000                    ; move nozzle up 20mm
    G90                            ; absolute positioning
    G0  X175 Y300 F3600            ; park nozzle at rear
    BED_MESH_CLEAR

    {% if FILAMENT_TYPE == 'PLA' or FILAMENT_TYPE == 'PETG' %}
        SET_FAN_SPEED FAN=nevermore_fan SPEED=0.0
        SET_FAN_SPEED FAN=exhaust_fan SPEED=0.0
    {% else %}
        SET_FAN_SPEED FAN=nevermore_fan SPEED=1.0
        UPDATE_DELAYED_GCODE ID=NEVERMORE_STOP_DELAYED DURATION=900
        SET_FAN_SPEED FAN=exhaust_fan SPEED=0.0
    {% endif %}

    M107                           ; turn off part fan
    #RUN_SHELL_COMMAND CMD=send_pushover_print_complete
    M117 Print Complete


[gcode_macro COLD_PULL]
gcode:
    {% set EXTRUDER = params.EXTRUDER|default(235) %}
    {% set PULLTEMP = params.PULLTEMP|default(150) %}
    G90
    M83
    G92 E0
    M109 S{EXTRUDER} 
    M104 S{PULLTEMP}
    M106 S120   #fan on
    G1 E5 F5
    M109 S{PULLTEMP}
    G1 E-15 F45
    G1 E-100 F300
    G92 E0
    M106 S0
    M104 S0
    M84


[gcode_macro LOG_INFO]
gcode:
  {action_respond_info(params.MESSAGE)}


[gcode_macro CG28]
gcode:
    {% if "x" not in printer.toolhead.homed_axes or "y" not in printer.toolhead.homed_axes or "z" not in printer.toolhead.homed_axes %}
    G28
    {% endif %}

################### PAUSE AND RESUME MACROS #####################


[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                        ; z hop amount

    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                                        ; set z hop variable for reference in resume macro
    
    SAVE_GCODE_STATE NAME=PAUSE
    BASE_PAUSE                                                                                    ; pause print
    G91                                                                                            ; relative positioning
    G1 Z{z} F900                                                                                ; raise Z up by z hop amount
    G90                                                                                            ; absolute positioning
    G1 XG0 X{printer.toolhead.axis_maximum.x/2} YG0 Y{printer.toolhead.axis_minimum.y+10} F18000   ; park toolhead at front center
    RESTORE_GCODE_STATE NAME=PAUSE
    SET_IDLE_TIMEOUT TIMEOUT=43200                                                                ; set timeout to 12 hours
 
[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                                                                ; nozzle prime amount
    
    SAVE_GCODE_STATE NAME=RESUME
    G91                                                                                                                    ; relative positioning
    {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}                                                
        G1 Z{zhop * -1} E{e} F900                                                                                        ; prime nozzle by E, lower Z back down
    {% else %}                        
        G1 Z{zhop * -1} F900                                                                                            ; lower Z back down    without priming
    {% endif %}                                
    RESTORE_GCODE_STATE NAME=RESUME                        
    BASE_RESUME                                                                                                            ; resume print
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}                                            ; set timeout back to configured value

[gcode_macro M600]
gcode:
    PAUSE

[gcode_macro M601]
gcode:
    RESUME


########### CANCEL PRINT ############

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    TURN_OFF_HEATERS
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    SET_FAN_SPEED FAN=nevermore_fan SPEED=1.0
    UPDATE_DELAYED_GCODE ID=NEVERMORE_STOP_DELAYED DURATION=900
    BASE_CANCEL_PRINT


[gcode_macro GEN_A_MESH]
gcode:
    QUAD_GANTRY_LEVEL
    BED_MESH_CALIBRATE
    G28


[gcode_macro _SET_ACC]
variable_accel: 0
variable_accel_to_decel: 0
variable_last_val: 'RUN'
gcode:
  # set default parameter value
  {% set val = params.VAL|default(RUN)|string %}
  {% set homing_accel = 1200 %}
  
  {% if val == 'HOME' %}
    # store old values and apply home value
    SET_GCODE_VARIABLE MACRO=_SET_ACC VARIABLE=accel VALUE={printer.toolhead.max_accel}
    SET_GCODE_VARIABLE MACRO=_SET_ACC VARIABLE=accel_to_decel VALUE={printer.toolhead.max_accel_to_decel}
    {% set accel = homing_accel %}
    {% set accel_to_decel = homing_accel|int * 2 / 3 %}
  {% elif val == 'CONFIG' %}
    # set all to config values
    SET_GCODE_VARIABLE MACRO=_SET_ACC VARIABLE=accel VALUE={printer.configfile.settings.printer.max_accel}
    SET_GCODE_VARIABLE MACRO=_SET_ACC VARIABLE=accel_to_decel VALUE={printer.configfile.settings.printer.max_accel_to_decel}
    {% set accel = printer.configfile.settings.printer.max_accel %}
    {% set accel_to_decel = printer.configfile.settings.printer.max_accel_to_decel %}
  {% else %}
    # load stored values
    {% set accel = printer["gcode_macro _SET_ACC"].accel %}
    {% set accel_to_decel = printer["gcode_macro _SET_ACC"].accel_to_decel %}
  {% endif %}

  {% if val !=  printer["gcode_macro _SET_ACC"].last_val %}
    SET_GCODE_VARIABLE MACRO=_SET_ACC VARIABLE=last_val VALUE='"{val}"'
    {action_respond_info("VELOCITY_LIMIT set ACCEL: %d ACCEL_TO_DECEL: %d" % (accel|int, accel_to_decel|int))}
    SET_VELOCITY_LIMIT ACCEL={accel} ACCEL_TO_DECEL={accel_to_decel}
  {% endif %}


[gcode_shell_command backup_config]
command: sh /home/sachiki/klipper_config/autocommit.sh
timeout: 30.
verbose: True

[gcode_shell_command send_pushover_print_complete]
command: sh /home/pi/backupconfig/VoronConfig/push_pushover.sh 'v2.1214 notification' 'Print complete'
timeout: 30.
verbose: True

[gcode_shell_command pushover_filament_runout]
command: sh /home/pi/backupconfig/VoronConfig/push_pushover.sh 'v2.1214 notification' 'Filament runout detected'
timeout: 30.
verbose: True

[gcode_shell_command send_preheat_complete]
command: sh /home/pi/backupconfig/VoronConfig/push_pushover.sh 'v2.1214 notification' 'Pre-heat Complete!'
timeout: 30.
verbose: True

[gcode_macro BACKUP_CONFIG]
gcode:
    RUN_SHELL_COMMAND CMD=backup_config

[gcode_macro BED_MESH_TEMP]
gcode:
    {% set TEMP = params.TEMP|default(110)|int %}
    {% set FORCE = params.FORCE|default(0)|int %}
    {% set WAIT_TIME = params.WAIT_TIME|default(60)|int %}
    {% set PLATE_SUFFIX = params.SUFFIX|default('')|string %}
    
    {% if TEMP|int < 30 %}
        {action_respond_info("TEMP is a required parameter!")}
    {% else %}
        {% if printer.configfile.config["bed_mesh temp_" + TEMP|string + PLATE_SUFFIX|string] is not defined or FORCE|int == 1 %}
            LOG_INFO message="No bed mesh found for temp: {TEMP}{PLATE_SUFFIX}C generating one now."
            LOG_INFO message="Being forced? {FORCE}"
            M190 S{TEMP}           ; wait for bed temp
            ; Run QGL/home at new temp, both to validate we're still leveled at the new
            ; temp, but also to give the temp a bit to soak.
            {% for timer in range( WAIT_TIME|int,0,-1) %}
                M117 Soak: {timer|int}m remaining
                M105
                G4 P60000
            {% endfor %}
            G32
            BED_MESH_CLEAR
            #PERFORM_DOCK_ACTION dock_action=undock
            M106 S255           ;Turn on PF to keep probe cool
            BED_MESH_CALIBRATE
            M107                ;Turn that fan off!
            #PERFORM_DOCK_ACTION dock_action=dock
            BED_MESH_PROFILE SAVE=temp_{TEMP}{PLATE_SUFFIX}
            SAVE_CONFIG
        {% endif %}
    {% endif %}

[gcode_macro BED_MESH_LOAD_TEMP]
gcode:
    {% set TEMP = params.TEMP|default(110)|int %}
    {% set FORCE = params.FORCE|default(0)|int %}
    {% set WAIT_TIME = params.WAIT_TIME|default(60)|int %}
    {% set PLATE_SUFFIX = params.SUFFIX|default('') %}
    BED_MESH_TEMP TEMP={TEMP} FORCE={FORCE} SUFFIX={PLATE_SUFFIX} WAIT_TIME={WAIT_TIME}
    BED_MESH_PROFILE LOAD=temp_{TEMP}{PLATE_SUFFIX}

[gcode_macro TEST_MACRO]
gcode:
    {% if printer.configfile.config["bed_mesh temp_" + TEMP] is not defined %}
        LOG_INFO message="bed_mesh temp_{TEMP} is not found"
    {% endif %}


# enable to SET_KINEMATIC_POSITION for Z hop
[force_move]
enable_force_move: True


##############RESONANCE TESTING MACROS############################
[gcode_shell_command testres_graph]
command: sh /home/sachiki/printer_data/config/testres_graph_create.sh
timeout: 60.
verbose: True

[gcode_macro TR_GRAPH]
gcode:
    #CG28
    TEST_RESONANCES AXIS=X
    TEST_RESONANCES AXIS=Y
    RUN_SHELL_COMMAND CMD=testres_graph


################## PA TUNING ######################################
[gcode_macro PA_TUNE]
gcode:
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500
    TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005

[gcode_macro ZUP]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=0.01 MOVE=1

[gcode_macro ZDOWN]
gcode:
    SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1

[gcode_macro MOVE_Z]
gcode:
    SET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=1
    SET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=1
    SET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=1
    SET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=1
    G4 P500

    FORCE_MOVE STEPPER=stepper_z DISTANCE=10 VELOCITY=5
    FORCE_MOVE STEPPER=stepper_z1 DISTANCE=10 VELOCITY=5
    FORCE_MOVE STEPPER=stepper_z2 DISTANCE=10 VELOCITY=5
    FORCE_MOVE STEPPER=stepper_z3 DISTANCE=10 VELOCITY=5
